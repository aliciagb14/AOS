## Subsistema_2: Gesti√≥n de los veh√≠culos que son propiedad de los clientes
## y que se reparan y/o revisan en el taller. 
## Cada veh√≠culo estar√° identificado de forma √∫nica por su VIN.

openapi: 3.0.3
info:
  version: 1.1.0
  title: '[AOS] Especificaci√≥n API REST de un servicio'
  description: '*Gestion de vehiculos'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'

servers:
  - url: http://127.0.0.1:80/api/v1

tags:
  - name: 'üöóVehiculos'
    description: Gestion de vehiculos
  - name: 'üë• Clientes'
    description: Gestion de clientes (propietarios de vehiculos)
  - name: 'üß∞ Taller'
    description: Reparacion y revisi√≥n de veh√≠culos en el taller
  - name: 'üîçIdentificaci√≥n'
    description: Identificaci√≥n de veh√≠culos de forma √∫nica por su VIN

paths:
  /vehiculos:
    get:
      summary: Obtiene todos los vehiculos
      description: |
        La siguiente tabla define los c√≥digos de estado que puede devolver este endpoint
        
        | Status Code | Descripci√≥n | Motivo                             |
        | ------------| ------------| -----------------------------------|
        | **200**     | OK          | Listado de vehiculos             |
        | **404**     | NOT FOUND   | No hay ningun vehiculo     
      operationId: vehiculo_cget
      tags: ['üöóVehiculos']
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/orderParam'
        - $ref: '#/components/parameters/orderingParam'
      responses:
        '200':
          description: Listado de vehiculos disponibles
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehiculos:
                    description: array de vehiculos
                    type: array
                    items:
                      $ref: '#/components/schemas/Vehiculos'
              examples:
                vehiculos-example:
                  $ref: '#/components/examples/vehiculos-example'
        '404':
            $ref: '#/components/responses/Response_404'

    post:
      summary: A√±ade un nuevo vehiculo
      description: |
        La siguiente tabla define los c√≥digos de estado que puede devolver este endpoint
        
        | Status Code | Descripci√≥n          | Motivo                                    |
        | ------------| ---------------------| ------------------------------------------|
        | **201**     | CREATED              | EL vehiculo ha sido creado                |
        | **400**     | BAD REQUEST          | El identificador √∫nico ya existe          |
        | **422**     | UNPROCESSABLE ENTITY | Falta alguno de los atributos obligatorios|
        |             |                      | o el valor no est√° permitido              |
      tags: [ 'üöóVehiculos' ]
      operationId: vehiculos_post
      requestBody:
        $ref: '#/components/requestBodies/vehiculosRB'
      responses:
        '201':
          description: Nuevo vehiculo creado
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehiculos'
        '400':
          $ref: '#/components/responses/Response_400'
        '422':
          $ref: '#/components/responses/Response_422'

    options:
      summary: Proporciona la lista de los m√©todos HTTP soportados por esta ruta.
      description: Devuelve una cabecera `Allow` con la lista de m√©todos HTTP soportados (separados por comas).
      operationId: vehiculos_coptions
      tags: [ 'üöóVehiculos']
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta est√° vac√≠o&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'

components:
  headers:
    ETag:
      description: "Entity Tag (identificador √∫nico proporcionado para validaci√≥n de cach√©)"
      schema:
        type: string
        pattern: "[0-9a-f]*"
        example:
          33a64df551425fcc
    Allow:
      description: Lista de m√©todos HTTP soportados
      schema:
        type: string
      example: GET, DELETE, PUT, OPTIONS
    Location:
      description: '`URI` del nuevo recurso'
      schema:
        type: string
        format: uri
        x-faker: internet.url
        example:
          https://example.com/api/v1/plataformas/P01-001-A

  requestBodies:
    vehiculosRB:
      description: Informaci√≥n del nuevo vehiculo
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [ id, marca ]
            properties:
              id:
                $ref: '#/components/schemas/Id_Vehiculo'
              marca:
                $ref: '#/components/schemas/Marca_Vehiculo'
              estado:
                $ref: '#/components/schemas/Estados_Vehiculos'
    aeronaveRB:
      description: Informaci√≥n de la nueva Aeronave
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              matr√≠cula:
                description: Matr√≠cula de la aeronave
                type: string
                pattern: "^[A-Z]{1,2}-[A-Z]{3}$"
                example: "EC-JGR"
              envergadura:
                $ref: '#/components/schemas/Envergadura_Aeronave'
          example: { "matr√≠cula": "EC-JGR", "envergadura": "B" }

  parameters:
    vehiculoId:
      name: vehiculo_id
      in: path
      description: Identificador √∫nico del Vehiculo
      required: true
      schema:
        $ref: '#/components/schemas/Id_Vehiculo'
    ifMatchParam:
      name: If-Match
      in: header
      description: ETag actual del recurso que se desea modificar
      required: true
      schema:
        type: string
        pattern: "[0-9a-f]*"
    orderParam:
      name: order
      in: query
      description: 'Criterio de ordenaci√≥n: `id` | `marca` | `color`'
      required: false
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - id
          - marca
    orderingParam:
      name: ordering
      in: query
      description: 'Ordenaci√≥n: `ASC` | `DESC`'
      required: false
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
    pageParam:
      name: page
      in: query
      description: 'N√∫mero de p√°gina'
      required: false
      allowEmptyValue: false
      schema:
        type: integer
        minimum: 1

  responses:
    Response_400:
      description: '`BAD REQUEST` El identificador √∫nico ya existe.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-400:
              $ref: '#/components/examples/response-http-400'
    Response_404:
      description: '`NOT FOUND`: recurso no disponible'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-404:
              $ref: '#/components/examples/response-http-404'
    Response_409:
      description: '`CONFLICT`: el recurso no re√∫ne las condiciones adecuadas'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-404:
              $ref: '#/components/examples/response-http-409'
    Response_412:
      description: '`PRECONDITION FAILED`: El ETag proporcionado no est√° actualizado'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-412:
              $ref: '#/components/examples/response-http-412'
    Response_422:
      description: '`UNPROCESSABLE ENTITY` Falta alguno de los atributos obligatorios o son incorrectos.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-422:
              $ref: '#/components/examples/response-http-422'
