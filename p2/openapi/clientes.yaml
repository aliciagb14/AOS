openapi: 3.0.3
info:
  version: 1.1.0
  title: '[AOS] Especificación API REST de un servicio'
  description: '*Gestion de clientes'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'

servers:
  - url: http://127.0.0.1:80/api/v1

tags:
  - name: 'Clientes'
    description: Gestion de clientes

paths:
  /clientes:
    get:
      summary: Obtiene todos los clientes
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code | Descripción | Motivo                             |
        | ------------| ------------| -----------------------------------|
        | **200**     | OK          | Listado de clientes                |
        | **404**     | NOT FOUND   | No hay ningun cliente              |
      operationId: cliente_cget
      tags: [ 'Cliente' ]
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/orderParam'
        - $ref: '#/components/parameters/orderingParam'
      responses:
        '200':
          description: Lista de clientes
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientes:
                    description: array de clientes
                    type: array
                    items:
                      $ref: '#/components/schemas/Cliente'
                  links:
                    description: Enlaces de paginación
                    readOnly: true
                    type: object
                    properties:
                      prevPage:
                        $ref: '#/components/schemas/Link'
                      nextPage:
                        $ref: '#/components/schemas/Link'
              examples:
                clientes-example:
                  $ref: '#/components/examples/clientes-example'
        '404':
          $ref: '#/components/responses/Response_404'

    options:
      summary: Proporciona la lista de los métodos HTTP soportados por esta ruta.
      description: Devuelve una cabecera `Allow` con la lista de métodos HTTP soportados (separados por comas).
      operationId: cliente_coptions
      tags: [ 'Cliente' ]
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta está vacío&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'

    post:
      summary: Añade un nuevo cliente
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code | Descripción          | Motivo                                    |
        | ------------| ---------------------| ------------------------------------------|
        | **201**     | CREATED              | El cliente ha sido creada                 |
        | **400**     | BAD REQUEST          | El identificador único ya existe          |
        | **422**     | UNPROCESSABLE ENTITY | Falta alguno de los atributos obligatorios|
        |             |                      | o el valor no está permitido              |
      tags: [ 'Cliente' ]
      operationId: cliente_post
      requestBody:
        $ref: '#/components/requestBodies/clienteRB'
      responses:
        '201':
          description: Nuevo Cliente creado
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '400':
          $ref: '#/components/responses/Response_400'
        '422':
          $ref: '#/components/responses/Response_422'
  
  /clientes/{cliente_id}:
    parameters:
      - $ref: '#/components/parameters/clienteId'
    options:
      summary: Proporciona la lista de los métodos HTTP soportados por esta ruta.
      description: Devuelve una cabecera `Allow` con la lista de métodos HTTP soportados (separados por comas).
      operationId: cliente_options
      tags: [ 'Cliente' ]
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta está vacío&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
    get:
      summary: Obtiene un cliente identificado por `clienteId`
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code | Descripción | Motivo                             |
        | ------------| ------------| -----------------------------------|
        | **200**     | OK          | Si el cliente existe               |
        | **404**     | NOT FOUND   | Si no existe el cliente            |
      operationId: cliente_get
      tags: [ 'Cliente' ]
      responses:
        '200':
          description: Cliente
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '404':
          $ref: '#/components/responses/Response_404'
    delete:
      summary: Elimina el cliente identificada por `clienteId`
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code      | Descripción | Motivo                                    |
        | ---------------- | ------------| ------------------------------------------|
        | **204**          | NO CONTENT  | El cliente existía y ha sido eliminada    |
        | **404**          | NOT FOUND   | Si el cliente no existe                   |
      operationId: cliente_delete
      tags: [ 'Cliente' ]
      responses:
        '204':
          description: Cliente eliminada &lt;Cuerpo de la respuesta vacío&gt;
        '404':
          $ref: '#/components/responses/Response_404'
    put:
      tags: [ 'Cliente' ]
      summary: Modifica el cliente identificado por `clienteId`.
      description:  |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint

        | Status Code | Descripción         | Motivo                                        |
        | ------------| --------------------| ----------------------------------------------|
        | **209**     | CONTENT RETURNED    | El cliente existía y ha sido actualizada      |
        | **404**     | NOT FOUND           | Si el cliente no existe                       |
        | **412**     | PRECONDITION FAILED | Si el Tag proporcionado no está actualizado   |
        | **422**     | UNPROCESSABLE ENTITY| Valor no permitido en alguno de los attributos|
      operationId: cliente_put
      parameters:
        - $ref: '#/components/parameters/ifMatchParam'
      responses:
        '209':
          description: '`CONTENT RETURNED`: el cliente ha sido actualizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '404':
          $ref: '#/components/responses/Response_404'
        '412':
          $ref: '#/components/responses/Response_412'
        '422':
          $ref: '#/components/responses/Response_422'

components:
  headers:
    ETag:
      description: "Entity Tag (identificador único proporcionado para validación de caché)"
      schema:
        type: string
        pattern: "[0-9a-f]*"
        example:
          33a64df551425fcc
    Allow:
      description: Lista de métodos HTTP soportados
      schema:
        type: string
      example: GET, DELETE, PUT, OPTIONS
    Location:
      description: '`URI` del nuevo recurso'
      schema:
        type: string
        format: uri
        x-faker: internet.url
        example:
          https://example.com/api/v1/plataformas/P01-001-A
  
  requestBodies:
    clienteRB:
      description: Información de los Clientes
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [ id, dni ]
            properties:
              id:
                $ref: '#/components/schemas/Id_Cliente'
              dni:
                $ref: '#/components/schemas/DNI_Cliente'
              nombre:
                $ref: '#/components/schemas/Nombre_Cliente'
              apellidos:
                $ref: '#/components/schemas/Apellidos_Cliente'
              direccion:
                $ref: '#/components/schemas/Direccion_Cliente'
              cuenta_bancaria:
                $ref: '#/components/schemas/CuentaBancaria_Cliente'
              telefono:
                $ref: '#/components/schemas/Telefono'
              mail:
                $ref: '#/components/schemas/Mail'

  parameters:
    clienteId:
      name: cliente_id
      in: path
      description: Identificador único del Cliente
      required: true
      schema:
        $ref: '#/components/schemas/Id_Cliente'

    ifMatchParam:
      name: If-Match
      in: header
      description: ETag actual del recurso que se desea modificar
      required: true
      schema:
        type: string
        pattern: "[0-9a-f]*"

    orderParam:
      name: order
      in: query
      description: 'Criterio de ordenación: `id`'
      required: false
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - id

    orderingParam:
      name: ordering
      in: query
      description: 'Ordenación: `ASC` | `DESC`'
      required: false
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - ASC
          - DESC

    pageParam:
      name: page
      in: query
      description: 'Número de página'
      required: false
      allowEmptyValue: false
      schema:
        type: integer
        minimum: 1

  schemas:
    Cliente:
      title: 'Cliente del sistema'
      description: >
        Cualquier cliente del sistema 
      type: object
      properties:
        cliente:
          type: object
          required: [ id, dni ]
          properties:
            id:
              $ref: '#/components/schemas/Id_Cliente'
            dni:
              $ref: '#/components/schemas/DNI_Cliente'
            nombre:
              $ref: '#/components/schemas/Nombre_Cliente'
            apellidos:
              $ref: '#/components/schemas/Apellidos_Cliente'
            direccion:
              $ref: '#/components/schemas/Direccion_Cliente'
            cuenta_bancaria:
              $ref: '#/components/schemas/CuentaBancaria_Cliente'
            telefono: 
              $ref: '#/components/schemas/Telefono'
            mail: 
              $ref: '#/components/schemas/Mail'
            links:
              description: Enlaces de relación del Cliente
              readOnly: true
              type: object
              properties:
                parent:
                  $ref: '#/components/schemas/Link'
                self:
                  $ref: '#/components/schemas/Link'
      example: { "cliente": {
                      "id": "P02-001-A",
                      "dni": "12345678u",
                      "nombre": "Pablito",
                      "apellidos" : "Clava Clavitos",
                      "direccion" : "miCasa",
                      "cuenta_bancaria" : "1111 1111 1111 1111",
                      "telefono" : "+12 122122122",
                      "mail" : "asdf@asdf.es",
                      "links": {
                        "parent": {
                          "href": "https://example.com/api/v1/clientes",
                          "rel": "cliente_post cliente_cget"
                        },
                        "self": {
                          "href": "https://example.com/api/v1/cliente/P01-123-Z",
                          "rel": "cliente_get cliente_delete cliente_put"
                        }
                      }
                  }
                }

    Id_Cliente:
      title: Identificador único del cliente
      type: string
      pattern: "^[A-Z]{1}[0-9]{2}-[0-9]{3}-[A-Z]$"
      example: "P01-001-A"
      #x-faker: helpers.regexpStyleStringParse('P[10-99]-[100-999]-X')

    DNI_Cliente:
      title: DNI del cliente
      type: string
      pattern: "[0-9]{8}[AZ]{1}"
      example: "12345678u"
      #x-faker: helpers.regexpStyleStringParse('P[10-99]-[100-999]-X')
      
    Nombre_Cliente:
      title: Nombre del cliente
      type: string
      example: "Victor"

    Apellidos_Cliente:
      title: Apellidos del cliente
      type: string
      example: "Mitrana"

    Direccion_Cliente:
      title: Dirección del cliente
      type: string
      example: "calle de mi casa 1 1º A"

    CuentaBancaria_Cliente:
      title: Cuenta bancaria del cliente
      type: string
      pattern: "[a-zA-Z]{2}[0-9]{20}"
      example: "aa010101010101010101010"

    Telefono:
      title: Telefono del cliente
      type: string
      pattern: "^+(?:[0-9] ?){6,14}[0-9]$"
      example: "+12 12311231"

    Mail:
      title: Mail del cliente
      type: string
      pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$"
      example: "asdf@asdf.asd"

    HTTP_Problem:
      type: object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7807
      description: |
        Problem Details for HTTP APIs
        [https://tools.ietf.org/html/rfc7807](https://tools.ietf.org/html/rfc7807)
      properties:
        type:
          type: string
          format: uri
          description: A URI reference [RFC3986] that identifies the problem type
        title:
          type: string
          description: short human-readable summary of the problem type
        status:
          type: number
          description: HTTP status code
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: >
            A URI reference that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.

    Link:
      description: Enlace de relación
      title: '🔗 Link'
      type: object
      properties:
        href:
          description: URL del enlace
          type: string
          format: uri
          x-faker: internet.url
        rel:
          description: "Relación del recurso enlazado con el actual. Contiene una lista de tipos
                    de relaciones separados por espacio."
          type: string
          x-faker: lorem.words
      example:
        href: https://www.example.com/path/resource
        rel: relAction1 relAction2

    AllClientes:
      type: object
      properties:
        Cliente:
          $ref: '#/components/schemas/Cliente'
        Id_Cliente:
          $ref: '#/components/schemas/Id_Cliente'
        DNI_Cliente:
          $ref: '#/components/schemas/DNI_Cliente'
        Nombre_Cliente:
          $ref: '#/components/schemas/Nombre_Cliente'
        Apellidos_Cliente:
          $ref: '#/components/schemas/Apellidos_Cliente'
        Direccion_Cliente:
          $ref: '#/components/schemas/Direccion_Cliente'
        CuentaBancaria_Cliente:
          $ref: '#/components/schemas/CuentaBancaria_Cliente'
        Telefono: 
          $ref: '#/components/schemas/Telefono'
        Mail: 
          $ref: '#/components/schemas/Mail'
        HTTP_Problem:
          $ref: '#/components/schemas/HTTP_Problem'
        Link:
          $ref: '#/components/schemas/Link'

  responses:
    Response_400:
      description: '`BAD REQUEST` El identificador único ya existe.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-400:
              $ref: '#/components/examples/response-http-400'

    Response_404:
      description: '`NOT FOUND`: recurso no disponible'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-404:
              $ref: '#/components/examples/response-http-404'

    Response_409:
      description: '`CONFLICT`: el recurso no reúne las condiciones adecuadas'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-404:
              $ref: '#/components/examples/response-http-409'
    Response_412:
      description: '`PRECONDITION FAILED`: El ETag proporcionado no está actualizado'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-412:
              $ref: '#/components/examples/response-http-412'
    Response_422:
      description: '`UNPROCESSABLE ENTITY` Falta alguno de los atributos obligatorios o son incorrectos.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-422:
              $ref: '#/components/examples/response-http-422'

  examples:
    clientes-example:
      value:
        clientes:
          - { "cliente": { "id": "P01-001-A", "dni": "12345678u", "nombre" : "Pepe", "apellidos" : "Popo Pipi", "direccion" : "mi casa 1", "cuenta_bancaria" : "aa10101010101010101010",
                "telefono" : "+12 122122123", "mail" : "asdf@asdf.as",
                "links": {
                  "parent": { "href": "https://example.com/api/v1/clientes", "rel": "cliente_post cliente_cget"},
                  "self": { "href": "https://example.com/api/v1/clientes/P01-001-A", "rel": "cliente_get cliente_delete cliente_put" }
              }}}
          - { "cliente": { "id": "P02-039-C", "dni": "98765432w", "nombre" : "Manuel", "apellidos" : "Ottaviano", "direccion" : "upm 2", "cuenta_bancaria" : "aa22101010101010101010",
                "telefono" : "+12 111122123", "mail" : "a1111qqf@asdf.as",
                "links": {
                  "parent": { "href": "https://example.com/api/v1/clientes", "rel": "cliente_post cliente_cget"},
                  "self": { "href": "https://example.com/api/v1/clientes/P02-039-C", "rel": "cliente_get cliente_delete cliente_put" }
              }}}
        links: {
          "prevPage": { "href": "https://example.com/api/v1/clientes?page=2", "rel": "prevPage" },
          "nextPage": { "href": "https://example.com/api/v1/clientes?page=4", "rel": "nextPage" }
        }

    response-http-400:
      value:
        type: https://httpstatuses.com/400
        title: UNPROCESSABLE ENTITY
        status: 400
        detail: El identificador único ya existe
        instance: about:blank
    response-http-404:
      value:
        type: https://httpstatuses.com/404
        title: NOT FOUND
        status: 404
        detail: El recurso solicitado no está disponible.
        instance: about:blank
    response-http-409:
      value:
        type: https://httpstatuses.com/409
        title: NOT FOUND
        status: 409
        detail: El recurso no reúne las condiciones requeridas para la operación.
        instance: about:blank
    response-http-412:
      value:
        type: https://httpstatuses.com/412
        title: PRECONDITION FAILED
        status: 412
        detail: El ETag proporcionado no está actualizado
        instance: about:blank
    response-http-422:
      value:
        type: https://httpstatuses.com/422
        title: UNPROCESSABLE ENTITY
        status: 422
        detail: Falta alguno de los atributos obligatorios o contiene un valor no admitido
        instance: about:blank